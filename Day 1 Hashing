//75 Hard Challenge
//Day-1 (Module-35 Hashing)-04/09/2024

//LinkedHashMap

//Keys are inserted in ordered manner

import java.util.*;;
/* public class Hashing {
    public static void main(String[] args) {
        LinkedHashMap<String,Integer> lhm=new LinkedHashMap<>();
        lhm.put("India",140);
        lhm.put("China", 130);
        lhm.put("USA",52);
        lhm.put("Nepal", 18);

        System.out.println(lhm);

    
    }
  
}  */


//TreeMap -Keys are in sorted manner

/**
 * Hashing
 */
/* public class Hashing {

    public static void main(String[] args) {
        //HashMap
        HashMap <String,Integer> hm=new HashMap<>();
        hm.put("India",140);
        hm.put("China", 130);
        hm.put("USA",52);
        hm.put("Nepal", 18);

        //LinkedHashMap
        LinkedHashMap<String,Integer> lhm=new LinkedHashMap<>();
        lhm.put("India",140);
        lhm.put("China", 130);
        lhm.put("USA",52);
        lhm.put("Nepal", 18);


        //TreeMap
        TreeMap <String,Integer> tm=new TreeMap<>();
        tm.put("India",140);
        tm.put("China", 130);
        tm.put("USA",52);
        tm.put("Nepal", 18);

        System.out.println(hm);
        System.out.println(lhm);
        System.out.println(tm);


    }
} */


//Majority Element-O(n)

/**
 * Hashing
 */

 //Method-1

/* public class Hashing {

    public static void main(String[] args) {
        int arr[]={1,3,2,5,1,3,1,5,1};
        //int arr[]={1,2};

        HashMap <Integer,Integer> map=new HashMap<>();
        for(int i=0;i<arr.length;i++){
            if(map.containsKey(arr[i])){
                map.put(arr[i],map.get(arr[i])+1);
            }else{
                map.put(arr[i],1);
            }
        }

        Set<Integer> keySet=map.keySet();
        for (Integer keys : keySet) {
            if(map.get(keys)>arr.length/3){
                System.out.print (keys+" ");
            }
       }

    }
}
 */
//Method-2

/* public class Hashing {

    public static void main(String[] args) {
        int arr[]={1,3,2,5,1,3,1,5,1};
        //int arr[]={1,2};
 
        HashMap <Integer,Integer> map=new HashMap<>();
        for(int i=0;i<arr.length;i++){
            map.put(arr[i],map.getOrDefault(arr[i], 0)+1);
        }

        for (Integer keys : map.keySet()) {
            if(map.get(keys)>arr.length/3){
                System.out.print (keys+" ");
            }
       }

    }
} */

//Valid Anagram-O(n)

/**
 * Hashing
 */
/* public class Hashing {

    public static boolean isAnagram(String s,String p){
        if(s.length()!=p.length()){
            return false;
        }

        HashMap<Character,Integer> map=new HashMap<>();

        for(int i=0;i<s.length();i++){
            char ch=s.charAt(i);
            map.put(ch,map.getOrDefault(ch, 0)+1);
        }

        for(int i=0;i<p.length();i++){
            char ch=p.charAt(i);
            if(map.get(ch)!=null){
                if(map.get(ch)==1){
                    map.remove(ch);
                }else{
                    map.put(ch,map.get(ch)-1);
                }
            }else{
                return false;
            }
        }

        return map.isEmpty();
    }
    public static void main(String[] args) {
        String s="race";
        String p="care";
        System.out.println(isAnagram(s, p));
    }
}
 */


 //HashSet

 /**
  * Hashing
  */
/*  public class Hashing {
 
    public static void main(String[] args) {
        HashSet<Integer> hs=new HashSet<>();
        hs.add(1);
        hs.add(2);
        hs.add(3);
        hs.add(4);
        hs.add(2);
        hs.add(4);

        System.out.println(hs);

        if(hs.contains(2)){
            System.out.println("Contains 2");
        }
        if(hs.contains(5)){
            System.out.println("Contsis 5");
        }
        hs.remove(2);
        System.out.println(hs);

        System.out.println(hs.size());
        System.out.println(hs.isEmpty());
        hs.clear();
        System.out.println(hs.size());

    }
 } */

 // Iterations on HashSet-O(n)

 /**
  * Hashing
  */
 /* public class Hashing {
 
    public static void main(String[] args) {
        HashSet<String> cities=new HashSet<>();
        cities.add("Mumbai");
        cities.add("Delhi");
        cities.add("Kolkata");
        cities.add("Chennai");

        //method1- Iterator 

        Iterator it=cities.iterator();

        while (it.hasNext()) {
            System.out.println(it.next());
        }

        //Method 2- Advanced for loop

        for (String city : cities) {
            System.out.println(city);
        }


        System.out.println(cities);

        //LinkedHashSet
        LinkedHashSet <String> lhs=new LinkedHashSet<>();

        lhs.add("Mumbai");
        lhs.add("Delhi");
        lhs.add("Kolkata");
        lhs.add("Chennai");

        System.out.println(lhs);

        //TreeSet

        TreeSet <String> ts=new TreeSet<>();

        ts.add("Mumbai");
        ts.add("Delhi");
        ts.add("Kolkata");
        ts.add("Chennai");

        System.out.println(ts);


    }
 } */


 //Count Distinct Element

 /**
  * Hashing
  */
//  public class Hashing {
 
//     public static void main(String[] args) {
//         int nums[]={4,3,2,5,6,7,3,4,2,1};

//         HashSet<Integer> hs=new HashSet<>();

//         /* for(int i=0;i<nums.length;i++){
//             hs.add(nums[i]);
//         } */
//         for (Integer el : nums) {
//             hs.add(el);
//         }

//         System.out.println("Distinct element in this array is "+hs.size());
//     }
//  }


//Union and Intersection

/**
 * Hashing
 */
/* public class Hashing {
    public static void main(String[] args) {
        int arr1[]={7,3,9};
        int arr2[]={6,3,9,2,9,4};

        HashSet<Integer> set=new HashSet<>();
        for(Integer i:arr1){
            set.add(i);
        }

        for(Integer j:arr2){
            set.add(j);
        }

        System.out.println("Union is "+set.size());

        //Intersection

        set.clear();

        for(Integer k:arr1){
            set.add(k);
        }
        int count=0;

        for(int i=0;i<arr2.length;i++){
            if(set.contains(arr2[i])){
                count++;
                set.remove(arr2[i]);
            }
        }
        System.out.println("Intersection is "+count);


    }
} */


//find itinerary from tickets

/**
 * Hashing
 */
public class Hashing {

    public static String getStartingPoint(HashMap<String,String> tickets){
        HashMap<String,String> revMap=new HashMap<>();

        for(String key:tickets.keySet()){
            revMap.put(tickets.get(key),key);
        }

        for (String key:tickets.keySet()) {
            if(!revMap.containsKey(key)){
                return key;
            }
        }

        return null;
    }

    public static void main(String[] args) {
        HashMap<String,String> tickets=new HashMap<>();
        tickets.put("Chennai","Bangaluru");
        tickets.put("Mumbai","Delhi");
        tickets.put("Goa","Chennai");
        tickets.put("Delhi","Goa");

        String start=getStartingPoint(tickets);
        System.out.print(start);
        for (String key : tickets.keySet()) {
            System.out.print("->"+tickets.get(start));
            start=tickets.get(start);
        }
        System.out.println();

    }
}

