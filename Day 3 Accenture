//Hard Day-3 (Accenture Questions)-06/09/2024

//Question-1 Move Hypen

/**
 * Accenture
 */
/**
 * Accenture
 */
/* public class Accenture {

    public static String moveHypens(String str,int n){
        String res="";
        for(int i=0;i<n;i++){
            if(str.charAt(i)=='-'){
                res=str.charAt(i)+res;
            }else{
                res=res+str.charAt(i);
            }
        }

        return res;
    }

    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        int t=sc.nextInt();

        while (t-->0) {
            String str=sc.next();
            System.out.println(moveHypens(str, str.length()));
        }
    }
}

 */

//Method -2
/* import import java.util.Stack;

public class MoveHyphens {

    public static String moveHyphen(String str, int n) {
        // Check for null input
        if (str == null) {
            return null;
        }

        Stack<Character> hyphenStack = new Stack<>();
        Stack<Character> charStack = new Stack<>();

        // Process the string and push characters to respective stacks
        for (int i = 0; i < n; i++) {
            char ch = str.charAt(i);
            if (ch == '-') {
                hyphenStack.push(ch);
            } else {
                charStack.push(ch);
            }
        }

        // Build the result string
        StringBuilder result = new StringBuilder();

        // Append hyphens
        while (!hyphenStack.isEmpty()) {
            result.append(hyphenStack.pop());
        }

        // Append other characters
        while (!charStack.isEmpty()) {
            result.append(charStack.pop());
        }

        return result.toString();
    }

    public static void main(String[] args) {
        // Example input
        String str = "Move-Hyphens-to-Front";
        int n = str.length();

        // Output the result
        String result = moveHyphen(str, n);
        System.out.println("Output: " + result);
    }
} */


 //Questions-2 NumberOfCarries

 /**
  * Accenture
  */

import java.util.*;


 /* public class Accenture {
 
    public static int noOfCarries(int num1, int num2){
        
       int carry=0;
       int carryCount=0;

       while (num1>0 || num2>0 || carry>0) {
            int digit1=num1%10;
            int digit2=num2%10;

            int sum=digit1+digit2+carry;

            if(sum>=10){
                carryCount++;
                carry=1;
            }else{
                carry=0;
            }

            num1=num1/10;
            num2=num2/10;
       }

       return carryCount;


    }
        

        
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        int t=sc.nextInt();
        while (t-->0) {
            int num1=sc.nextInt();
            int num2=sc.nextInt();
            System.out.println(noOfCarries(num1, num2));
        }
    }
 } */

 //Question-3 ReplaceCharacter
 /**
  * Accenture
  */
 /* public class Accenture {
    public static String replaceCharcter(String str,char ch1,char ch2){
        String res="";
        int n=str.length();
        if(n==0) return null;
        for(int i=0;i<n;i++){
            if(str.charAt(i)==ch1){
                res=res+ch2;
            }else if(str.charAt(i)==ch2){
                res=res+ch1;
            }else{
                res=res+str.charAt(i);
            }
        }
        return res;
    }
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        int t=sc.nextInt();
        while (t-->0) {
            String str=sc.next();
            char ch1=sc.next().charAt(0);
            char ch2=sc.next().charAt(0);
            System.out.println(replaceCharcter(str, ch1, ch2));
        }
    }
 } */

 //Question-4  OperationChoices

 /**
  * Accenture
  */
//  public class Accenture {
//     public static int operationChoice(int a,int b,int c){
//         int result=0;
//         /* if(c==1){
//             result=a+b;
//         }else if(c==2){
//             result=a-b;
//         }else if(c==3){
//             result=a*b;
//         }else if(c==4){
//             result=a/b;
//         } */

//         switch(c){
//             case 1:
//             result=a+b;
//             break;
//             case 2:
//             result=a-b;
//             break;
//             case 3:
//             result=a*b;
//             break;
//             case 4:
//             result=a/b;

//             default:
//             break;
//         }
//         return result;
//     }
//     public static void main(String[] args) {
//         Scanner sc=new Scanner(System.in);
//         int t=sc.nextInt();

//         while (t-->0) {
//             int a=sc.nextInt();
//             int b=sc.nextInt();
//             int c=sc.nextInt();
//             System.out.println(operationChoice(a, b, c));
//         }
//     }
//  }

//Question-5 MaxExponents

/**
 * Accenture
 */
public class Accenture {

    public static int count(int i){
        int count=0;
        while (i%2==0 && i!=0) {
            count++;
            i/=2;
        }
        return count;
    }
    public static int maxExponents(int a, int b){
        int maxExpo=0,num=0;
        for(int i=a;i<=b;i++){
            int temp=count(i);
            if(temp>maxExpo){
                maxExpo=temp;
                num=i;
            }
        }
        return num;
    }
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        int t=sc.nextInt();
        while (t-->0) {
            int a=sc.nextInt();
            int b=sc.nextInt();
            System.out.println(maxExponents(a, b));
        }
    }
}

